has_words_before = ->
  line, col = unpack(vim.api.nvim_win_get_cursor(0))
  return col ~= 0 and vim.api.nvim_buf_get_lines(0, line - 1, line, true)[1]\sub(col, col)\match('%s') == nil

export default ->
  cmp = require 'cmp'
  luasnip = require 'luasnip'

  cmp.setup
    snippet:
      -- REQUIRED - you must specify a snippet engine
      expand: (args) ->
        luasnip.lsp_expand(args.body), -- For `luasnip` users.
    window: {
      -- completion: cmp.config.window.bordered(),
      -- documentation: cmp.config.window.bordered(),
    },
    mapping: cmp.mapping.preset.insert({
      ['<C-b>']: cmp.mapping.scroll_docs(-4),
      ['<C-f>']: cmp.mapping.scroll_docs(4),
      ['<C-space>']: cmp.mapping.complete(),
      ['<C-e>']: cmp.mapping.abort(),
      ['<CR>']: cmp.mapping.confirm({ select: false }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
      ['<Tab>']: cmp.mapping(
        (fallback) ->
          if cmp.visible()
            cmp.select_next_item()
          elseif luasnip.expand_or_jumpable()
            luasnip.expand_or_jump()
          elseif has_words_before()
            cmp.complete()
          else
            fallback(),
        {
          'i',
          's',
          'c',
        }),
      ['<S-Tab>']: cmp.mapping(
        (fallback) ->
          if cmp.visible()
            cmp.select_prev_item()
          elseif luasnip.jumpable(-1)
            luasnip.jump(-1)
          else
            fallback(),
        {
          'i',
          's',
          'c',
        }),
    }),
    sources: cmp.config.sources({
      { name: 'nvim_lsp' },
      { name: 'treesitter' },
      { name: 'luasnip' }, -- For luasnip users.
      { name: 'path' },
    }, {
      { name: 'buffer' },
    })

  -- Auto pairs
  cmp_autopairs = require 'nvim-autopairs.completion.cmp'
  cmp.event\on('confirm_done', cmp_autopairs.on_confirm_done { map_char: { tex: '' } })
